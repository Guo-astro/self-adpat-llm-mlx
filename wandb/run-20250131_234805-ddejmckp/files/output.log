Model type: <class 'src.transformer_svd.TransformerLM'>
Is model a subclass of nn.Module? yes
Does model have a __call__ method? True
Model's parameters:
Total Parameters (excluding 'embedding' and 'pe'): 0
╭────────────── Model Information ───────────────╮
│ Training a Transformer with 0.000 M Parameters │
╰────────────────────────────────────────────────╯
Model is callable. Output shape: (1, 1024, 10000)
Traceback (most recent call last):
  File "/Users/guo/OSS/self-adpat-llm-mlx/main.py", line 550, in <module>
    main(args)
  File "/Users/guo/OSS/self-adpat-llm-mlx/main.py", line 252, in main
    loss = step(inputs, targets)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/Users/guo/OSS/self-adpat-llm-mlx/main.py", line 218, in step
    loss = loss_fn(model, inputs, targets, reduce=True)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/guo/OSS/self-adpat-llm-mlx/main.py", line 170, in loss_fn
    return np.mean(losses) if reduce else np.mean(losses, axis=(-1, -2))
           ^^^^^^^^^^^^^^^
  File "/Users/guo/OSS/self-adpat-llm-mlx/.venv/lib/python3.12/site-packages/numpy/_core/fromnumeric.py", line 3858, in mean
    return mean(axis=axis, dtype=dtype, out=out, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
TypeError: mean(): incompatible function arguments. The following argument types are supported:
    1. mean(self, axis: int | collections.abc.Sequence[int] | None = None, keepdims: bool = False, *, stream: mlx.core.Stream | mlx.core.Device | None = None) -> mlx.core.array

Invoked with types: mlx.core.array, kwargs = { axis: NoneType, dtype: NoneType, out: NoneType }
